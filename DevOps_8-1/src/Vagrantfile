# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  #ENV['VAGRANT_SERVER_URL'] = 'http://vagrant.elab.pro'


config.vm.define "manager", primary: true do |manager|
  manager.vm.hostname = "manager"
  manager.vm.provision "file", source: "/home/krzf/DevOps_8-1/src/services", destination: "/home/vagrant/"
  manager.vm.box = "ubuntu/focal64"
  manager.vm.network "private_network", ip: "192.168.50.10"
  #manager.vm.network "forwarded_port", guest: 8087, host: 8087, id: "gateway-service"

  manager.vm.provision "shell", path: "./install_ans.sh"
end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.define "consul_server", primary: true do |consul_server|
    consul_server.vm.box = "ubuntu/focal64"
    consul_server.vm.hostname = "consulserver"
    consul_server.vm.network "private_network", ip: "192.168.50.11"
    consul_server.vm.network "forwarded_port", guest: 8500, host: 8500
    consul_server.vm.provision "shell", path: "./ssh.sh"
    #node01.vm.network "forwarded_port", guest: 8080, host: 8080
    #node01.vm.network "forwarded_port", guest: 8087, host: 8087, id: "gateway-service"
    #node01.vm.network "forwarded_port", guest: 8081, host: 8081, id: "session-service"
    #node01.vm.network "forwarded_port", guest: 8081, host: 8081
    #node01.vm.provision "shell", path: "./worker_init.sh"
    end

  config.vm.define "api", primary: true do |api|
    api.vm.box = "ubuntu/focal64"
    api.vm.hostname = "api"
    api.vm.network "private_network", ip: "192.168.50.12"
    api.vm.network "forwarded_port", guest: 8082, host: 8082
    api.vm.provision "shell", path: "./ssh.sh"
   # node02.vm.provision "shell", path: "./worker_init.sh"
    end
    
  config.vm.define "db", primary: true do |db|
    db.vm.box = "ubuntu/focal64"
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.50.13"
    #db.vm.network "forwarded_port", guest: 5432, host: 5432
    db.vm.provision "shell", path: "./ssh.sh"
   # node02.vm.provision "shell", path: "./worker_init.sh"
    end
    
  config.vm.provider "virtualbox" do |vb|
      #   # Display the VirtualBox GUI when booting the machine
      #   vb.gui = true
      #
      #   # Customize the amount of memory on the VM:
        vb.memory = "4096"
      end
  

  end
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "ubuntu/trusty64"
  #config.vm.network "forwarded_port", guest: 22, host: 2222
  #config.vm.network "forwarded_port", guest: 8000, host: 8001


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

